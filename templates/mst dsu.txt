// author : DocDoor
#include <bits/stdc++.h>
using namespace std;

typedef long long ll;

typedef pair<int, int> pi;
typedef pair<ll, ll> pl;

typedef vector<int> vi;
typedef vector<ll> vl;
typedef vector<pi> vpi;
typedef vector<pl> vpl;

#define pb push_back
#define mp make_pair
#define f first
#define s second
#define ins insert
#define all(c) (c).begin(), (c).end()
#define sz(x) (int)(x).size()

#define FOR(i, n) for(int i=0; i<n; ++i)
#define trav(a, x) for(auto &a : x) 

const ll INF=1e17, M=1e9+7;
const int mxN=1e5+5;

struct DSU {
  vector<int> sz, par;
  DSU(int n) {
    par.resize(n+1);
    sz.resize(n+1, 1);
    iota(all(par), 0);
  }
  inline int find(int x) {
    return par[x]=(x==par[x]?x:find(par[x]));
  }
  void unite(int x, int y) {
    par[x]=par[y];
  }
  bool same(int x, int y) {
    return find(x)!=find(y);
  }
  int getsize(int x) {
    return sz[x];
  }
};

bool compare(pair<int, pair<int, int>> a, pair<int, pair<int, int>> b) {
  return a.first<b.first;
}

void solve() {
  int n, m; cin >> n >> m;
  vector<pair<int, pair<int, int>>> edges;
  DSU a(n);
  FOR(i, m) {
    int u, v, w;
    cin >> u >> v >> w;
    edges.push_back(mp(w, mp(u, v)));
  }
  sort(edges.begin(), edges.end(), compare);
  trav(i, edges) {
    if(a.same(i.second.first, i.second.second)) {
      a.unite(i.second.first, i.second.second);
      cout << i.second.first << " " << i.second.second << '\n';
    }
  }
}

int main() {
  ios::sync_with_stdio(0);
  cin.tie(0);
  int t=1;
  // cin >> t;
  while(t--) {
    solve();
  }
} 